# GitHub Copilot Coding Agent Environment Configuration
# This file configures the development environment for the Copilot coding agent
# to enable crucial dev tools like `nix flake check` and other Nix development commands.

# Development environment configuration
environment:
  # Use GitHub Actions to set up Nix environment reliably
  # This leverages cachix/install-nix-action for robust installation
  setup_workflow: ".github/workflows/setup-nix-env.yml"
  
  # Simple shell environment that assumes Nix is properly set up
  shell: |
    # Ensure Nix environment is available
    if ! command -v nix &> /dev/null; then
      echo "⚠️  Nix not found. Please ensure the setup workflow has run."
      echo "📋 Run: gh workflow run setup-nix-env.yml"
      exit 1
    fi
    
    # Verify flakes support
    if ! nix flake --help &> /dev/null; then
      echo "🔧 Enabling flakes support..."
      mkdir -p ~/.config/nix
      echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
    fi
    
    # Enter the development shell which provides all necessary tools
    echo "🚀 Entering Nix development shell..."
    nix develop --command bash

  # Environment variables needed for development
  variables:
    NIX_CONFIG: "experimental-features = nix-command flakes"
    # Ensure proper PATH for Nix tools
    NIX_PATH: ""
    # Prevent Nix from using /nix/var/nix/profiles/per-user paths
    NIX_USER_PROFILE_DIR: "/nix/var/nix/profiles/default"
    
# Commands that should be available in the development environment
commands:
  # Core Nix commands
  - name: "nix flake check"
    description: "Check flake syntax and evaluate all outputs"
    
  - name: "nix develop"
    description: "Enter the development shell with all tools"
    
  - name: "nix build"
    description: "Build Nix expressions and packages"

  # Just command runner shortcuts
  - name: "just help"
    description: "Show all available development commands"
    
  - name: "just check"
    description: "Check flake syntax (alias for nix flake check)"
    
  - name: "just check-darwin"
    description: "Validate nix-darwin config (fast validation)"
    
  - name: "just build-darwin"
    description: "Cross-compile full nix-darwin config from Linux"
    
  - name: "just build-linux"
    description: "Build NixOS VM for testing"
    
  - name: "just format"
    description: "Format Nix files using alejandra"
    
  - name: "just test"
    description: "Run cross-compilation tests"
    
  - name: "just clean"
    description: "Clean build results and artifacts"

# Setup commands to run when initializing the environment
setup:
  - description: "Setup Nix environment using GitHub Actions"
    run: |
      echo "🔧 Setting up Nix environment using cachix/install-nix-action..."
      echo "📋 This uses the reliable GitHub Actions approach instead of manual installation"
      
      # If running in GitHub Actions environment, Nix should already be set up
      if [[ -n "$GITHUB_ACTIONS" ]]; then
        echo "ℹ️  Running in GitHub Actions - Nix should be pre-configured"
      else
        echo "ℹ️  For local development, please run the setup workflow:"
        echo "   gh workflow run setup-nix-env.yml"
        echo "   Or use: nix develop (if Nix is already installed)"
      fi
      
  - description: "Verify environment and show available commands"  
    run: |
      # Ensure we're in the repository root
      cd $GITHUB_WORKSPACE || cd /workspace
      
      # Verify flake.nix exists
      if [[ ! -f flake.nix ]]; then
        echo "❌ Error: flake.nix not found in current directory"
        exit 1
      fi
      
      # Check if Nix is available and working
      if command -v nix &> /dev/null; then
        echo "✅ Nix is available"
        nix --version
        
        # Verify flake syntax
        echo "🔍 Checking flake syntax..."
        nix flake check --no-build || {
          echo "❌ Flake syntax check failed"
          exit 1
        }
        
        # Display available commands
        echo "🚀 Development environment ready!"
        echo "💡 Available commands:"
        nix develop --command bash -c "
          if command -v just &> /dev/null; then
            just help
          else
            echo '  - nix flake check (check flake syntax)'
            echo '  - nix develop (enter dev shell)'
            echo '  - nix build .#<package> (build packages)'
          fi
        "
      else
        echo "⚠️  Nix is not available. Please run the setup workflow first."
        echo "📋 Command: gh workflow run setup-nix-env.yml"
      fi

# Tools and packages that should be available
tools:
  - nix
  - just
  - alejandra
  - nixos-rebuild
  - nix-output-monitor
  - git

# File patterns that indicate this is a Nix project
project_patterns:
  - "flake.nix"
  - "flake.lock"
  - "*.nix"
  - "justfile"

# Documentation and help
help:
  description: |
    This is a Nix configuration repository with support for:
    - NixOS configurations (Linux)
    - nix-darwin configurations (macOS)
    - Cross-compilation between platforms
    - Home Manager for user-specific configs
    
    Environment Setup:
    This repository uses GitHub Actions (cachix/install-nix-action) for reliable
    Nix installation instead of manual shell scripts. This approach:
    - Is faster and more reliable
    - Handles edge cases better  
    - Avoids firewall issues with manual installers
    - Uses proven, well-tested installation methods
    
    Key development workflows:
    1. Use `just help` to see all available commands
    2. Use `just check` or `nix flake check` to validate configurations
    3. Use `just format` to format Nix files
    4. Use `just test` to run cross-compilation tests
    5. Use `just build-darwin` for cross-platform building
    
    The development shell (via `nix develop`) provides all necessary tools
    including nix, just, alejandra formatter, and build utilities.
    
  quick_start: |
    # Quick start commands:
    gh workflow run setup-nix-env.yml  # Setup environment (first time)
    nix flake check                    # Validate all configurations
    just help                         # Show available commands  
    just check-darwin                 # Quick darwin config check
    just format                       # Format Nix files
    just test                         # Run tests
    
  troubleshooting: |
    Common issues and solutions:
    
    1. "nix: command not found"
       - Run the setup workflow: gh workflow run setup-nix-env.yml
       - Or manually install Nix: curl -L https://nixos.org/nix/install | sh
       - Source environment: source ~/.nix-profile/etc/profile.d/nix.sh
    
    2. "experimental features not enabled"
       - The setup workflow handles this automatically
       - Manual fix: echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
    
    3. "just: command not found" 
       - Enter dev shell first: nix develop
       - Or run commands via: nix develop -c just <command>
    
    4. Flake evaluation errors
       - Check syntax: nix flake check --no-build
       - Update inputs: nix flake update
    
    5. Build failures
       - Clean previous builds: just clean
       - Check available packages: nix flake show
       
    6. GitHub Actions setup issues
       - Ensure cachix/install-nix-action@v31 is used
       - Check workflow logs for detailed error messages
       - Verify GitHub token permissions for private repos